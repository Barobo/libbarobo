#include <mobot.h>
#include <dlfcn.h>

CMobot::CMobot() {
  void *fptr;
  /* Here to load the dynamically loaded library if necessary.
     g_chmobot_dlhandle is a global pointer pointing to the loaded DLL
     g_chmobot_dlcount is a global int counting instances for all classes
     They are declared in the header file class1_ch.h for Ch space.
     */
  if(g_chmobot_dlhandle == NULL || g_chmobot_dlcount == 0) {
    g_chmobot_dlhandle = dlopen("libmobot.dl", RTLD_LAZY);
    if(g_chmobot_dlhandle == NULL) {
      printf("Error: %s(): dlopen(): %s\n", __class_func__, dlerror());
      return;
    }
  }
  /* to get the address by function name */
  fptr = dlsym(g_chmobot_dlhandle, "CMobot_CMobot_chdl");
  if(fptr == NULL) {
    printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
    return;
  }
  /* to call the chdl function in dynamically loaded
     library by address */
  dlrunfun(fptr, NULL, NULL);
  g_chmobot_dlcount++; // to increase count of instance
}

CMobot::~CMobot() {
  void *fptr;
  fptr = dlsym(g_chmobot_dlhandle, "CMobot_dCMobot_chdl");
  if(fptr == NULL) {
    printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
    return;
  }
  /* call the chdl function in DLL by address */
  dlrunfun(fptr, NULL, NULL, this);
  g_chmobot_dlcount--; // to decrease count of instance
  if(g_chmobot_dlcount <= 0 && g_chmobot_dlhandle != NULL) {
    if(dlclose(g_chmobot_dlhandle)!=0)
      printf("Error: %s(): dlclose(): %s\n", __class_func__, dlerror());
  }
}

int CMobot::connect() {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "connect_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, connect);
    return retval;
}
int CMobot::connectWithAddress(char *address, int channel) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "connectWithAddress_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, connectWithAddress, this, address, channel);
    return retval;
}
int CMobot::disconnect() {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "disconnect_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, disconnect, this);
    return retval;
}
int CMobot::getJointAngle(int id, double & angle) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "getJointAngle_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, id, &angle);
    return retval;
}
int CMobot::getJointMaxSpeed(int id, double & speed) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "getJointMaxSpeed_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, id, &speed);
    return retval;
}
int CMobot::getJointSafetyAngle(double & angle) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "getJointSafetyAngle_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, &angle);
    return retval;
}
int CMobot::getJointSafetyAngleTimeout(double & seconds) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "getJointSafetyAngleTimeout_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, &seconds);
    return retval;
}
int CMobot::getJointSpeed(int id, double & speed) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "getJointSpeed_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, id, &speed);
    return retval;
}
int CMobot::getJointSpeeds(double &speed1, double &speed2, double &speed3, double &speed4) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "getJointSpeeds_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, &speed1, &speed2, &speed3, &speed4);
    return retval;
}
int CMobot::getJointSpeedRatio(int id, double & ratio) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "getJointSpeedRatio_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, id, &ratio);
    return retval;
}
int CMobot::getJointSpeedRatios(double &ratio1, double &ratio2, double &ratio3, double &ratio4) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "getJointSpeedRatios_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, &ratio1, &ratio2, &ratio3, &ratio4);
    return retval;
}
int CMobot::getJointState(int id, int & state) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "getJointState_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, id, &state);
    return retval;
}
int CMobot::isConnected() {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "isConnected_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, isConnected, this);
    return retval;
}
int CMobot::isMoving() {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "isMoving_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, isMoving, this);
    return retval;
}
int CMobot::motionArch(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "motionArch_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionArch, this, angle);
    return retval;
}
int CMobot::motionArchNB(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "motionArchNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionArchNB, this, angle);
    return retval;
}
int CMobot::motionInchwormLeft(int num) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "motionInchwormLeft_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionInchwormLeft, this, num);
    return retval;
}
int CMobot::motionInchwormLeftNB(int num) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "motionInchwormLeftNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionInchwormLeftNB, this, num);
    return retval;
}
int CMobot::motionInchwormRight(int num) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "motionInchwormRight_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionInchwormRight, this, num);
    return retval;
}
int CMobot::motionInchwormRightNB(int num) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "motionInchwormRightNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionInchwormRightNB, this, num);
    return retval;
}
int CMobot::motionRollBackward(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "motionRollBackward_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionRollBackward, this, angle);
    return retval;
}
int CMobot::motionRollBackwardNB(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "motionRollBackwardNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionRollBackwardNB, this, angle);
    return retval;
}
int CMobot::motionRollForward(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "motionRollForward_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionRollForward, this, angle);
    return retval;
}
int CMobot::motionRollForwardNB(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "motionRollForwardNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionRollForwardNB, this, angle);
    return retval;
}
int CMobot::motionStand() {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "motionStand_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionStand, this);
    return retval;
}
int CMobot::motionStandNB() {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "motionStandNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionStandNB, this);
    return retval;
}
int CMobot::motionTurnLeft(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "motionTurnLeft_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionTurnLeft, this, angle);
    return retval;
}
int CMobot::motionTurnLeftNB(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "motionTurnLeftNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionTurnLeftNB, this, angle);
    return retval;
}
int CMobot::motionTurnRight(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "motionTurnRight_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionTurnRight, this, angle);
    return retval;
}
int CMobot::motionTurnRightNB(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "motionTurnRightNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionTurnRightNB, this, angle);
    return retval;
}
int CMobot::motionTumbleForward(int num) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "motionTumbleForward_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionTumbleForward, this, num);
    return retval;
}
int CMobot::motionTumbleForwardNB(int num) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "motionTumbleForwardNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionTumbleForwardNB, this, num);
    return retval;
}
int CMobot::motionTumbleBackward(int num) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "motionTumbleBackward_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionTumbleBackward, this, num);
    return retval;
}
int CMobot::motionTumbleBackwardNB(int num) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "motionTumbleBackwardNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionTumbleBackwardNB, this, num);
    return retval;
}
int CMobot::motionUnstand() {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "motionUnstand_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionUnstand, this);
    return retval;
}
int CMobot::motionUnstandNB() {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "motionUnstandNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionUnstandNB, this);
    return retval;
}
int CMobot::motionWait() {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "motionWait_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionWait, this);
    return retval;
}
int CMobot::move(double angle1, double angle2, double angle3, double angle4) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "move_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, move, this, angle1, angle2, angle3, angle4);
    return retval;
}
int CMobot::moveNB(double angle1, double angle2, double angle3, double angle4) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "moveNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveNB, this, angle1, angle2, angle3, angle4);
    return retval;
}
int CMobot::moveContinuousNB(int dir1, int dir2, int dir3, int dir4) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "moveContinuousNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveContinuousNB, this, dir1, dir2, dir3, dir4);
    return retval;
}
int CMobot::moveContinuousTime(int dir1, int dir2, int dir3, int dir4, double seconds) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "moveContinuousTime_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveContinuousTime, this, dir1, dir2, dir3, dir4, seconds);
    return retval;
}
int CMobot::moveJointContinuousNB(int id, int dir) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "moveJointContinuousNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointContinuousNB, this, id, dir);
    return retval;
}
int CMobot::moveJointContinuousTime(int id, int dir, double seconds) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "moveJointContinuousTime_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointContinuousTime, this, id, dir, seconds);
    return retval;
}
int CMobot::moveJoint(int id, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "moveJoint_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJoint, this, id, angle);
    return retval;
}
int CMobot::moveJointNB(int id, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "moveJointNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointNB, this, id, angle);
    return retval;
}
int CMobot::moveJointTo(int id, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "moveJointTo_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointTo, this, id, angle);
    return retval;
}
int CMobot::moveJointToNB(int id, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "moveJointToNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointToNB, this, id, angle);
    return retval;
}
int CMobot::moveJointWait(int id) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "moveJointWait_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointWait, this, id);
    return retval;
}
int CMobot::moveTo(double angle1, double angle2, double angle3, double angle4) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "moveTo_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveTo, this, angle1, angle2, angle3, angle4);
    return retval;
}
int CMobot::moveToNB(double angle1, double angle2, double angle3, double angle4) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "moveToNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveToNB, this, angle1, angle2, angle3, angle4);
    return retval;
}
int CMobot::moveToZero() {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "moveToZero_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveToZero, this);
    return retval;
}
int CMobot::moveToZeroNB() {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "moveToZeroNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveToZeroNB, this);
    return retval;
}
int CMobot::moveWait() {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "moveWait_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveWait, this);
    return retval;
}
int CMobot::recordAngle(int id, double time[:], double angle[:], int num, double seconds) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "recordAngle_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, recordAngle, this, id, time, angle, num, seconds);
    return retval;
}
int CMobot::recordAngles(double time[:], double angle1[:], double angle2[:], double angle3[:], double angle4[:], int num, double seconds) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "recordAngles_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, recordAngles, this, time, angle1, angle2, angle3, angle4, num, seconds);
    return retval;
}
int CMobot::recordWait() {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "recordWait_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, recordWait, this);
    return retval;
}
int CMobot::setJointSafetyAngle(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "setJointSafetyAngle_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setJointSafetyAngle, this, angle);
    return retval;
}
int CMobot::setJointSafetyAngleTimeout(double seconds) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "setJointSafetyAngleTimeout_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setJointSafetyAngleTimeout, this, seconds);
    return retval;
}
int CMobot::setJointSpeed(int id, double speed) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "setJointSpeed_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setJointSpeed, this, id, speed);
    return retval;
}
int CMobot::setJointSpeeds(double speed1, double speed2, double speed3, double speed4) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "setJointSpeeds_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setJointSpeeds, this, speed1, speed2, speed3, speed4);
    return retval;
}
int CMobot::setJointSpeedRatio(int id, double speed) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "setJointSpeedRatio_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setJointSpeedRatio, this, id, speed);
    return retval;
}
int CMobot::setJointSpeedRatios(double ratio1, double ratio2, double ratio3, double ratio4) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "setJointSpeedRatios_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, ratio1, ratio2, ratio3, ratio4);
    return retval;
}
int CMobot::setMotorPower(int id, int power) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "setMotorPower_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setMotorPower, this, id, power);
    return retval;
}
int CMobot::setTwoWheelRobotSpeed(double speed, double radius) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "setTwoWheelRobotSpeed_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setTwoWheelRobotSpeed, this, speed, radius);
    return retval;
}
int CMobot::stop() {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "stop_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, stop, this);
    return retval;
}

/* CMobotGroup */

CMobotGroup::CMobotGroup() {
  void *fptr;
  /* Here to load the dynamically loaded library if necessary.
     CMobot::g_chmobot_dlhandle is a global pointer pointing to the loaded DLL
     CMobot::g_chmobot_dlcount is a global int counting instances for all classes
     They are declared in the header file class1_ch.h for Ch space.
     */
  if(CMobot::g_chmobot_dlhandle == NULL || CMobot::g_chmobot_dlcount == 0) {
    CMobot::g_chmobot_dlhandle = dlopen("libmobot.dl", RTLD_LAZY);
    if(CMobot::g_chmobot_dlhandle == NULL) {
      printf("Error: %s(): dlopen(): %s\n", __class_func__, dlerror());
      return;
    }
  }
  /* to get the address by function name */
  fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMobotGroup_CMobotGroup_chdl");
  if(fptr == NULL) {
    printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
    return;
  }
  /* to call the chdl function in dynamically loaded
     library by address */
  dlrunfun(fptr, NULL, NULL);
  CMobot::g_chmobot_dlcount++; // to increase count of instance
}

CMobotGroup::~CMobotGroup() {
  void *fptr;
  fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMobotGroup_dCMobotGroup_chdl");
  if(fptr == NULL) {
    printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
    return;
  }
  /* call the chdl function in DLL by address */
  dlrunfun(fptr, NULL, NULL, this);
  CMobot::g_chmobot_dlcount--; // to decrease count of instance
  if(CMobot::g_chmobot_dlcount <= 0 && CMobot::g_chmobot_dlhandle != NULL) {
    if(dlclose(CMobot::g_chmobot_dlhandle)!=0)
      printf("Error: %s(): dlclose(): %s\n", __class_func__, dlerror());
  }
}

int CMobotGroup::addRobot(CMobot &robot) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMG_addRobot_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, &robot);
    return retval;
}
int CMobotGroup::isMoving() {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMG_isMoving_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, isMoving, this);
    return retval;
}
int CMobotGroup::motionArch(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMG_motionArch_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, angle);
    return retval;
}
int CMobotGroup::motionArchNB(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMG_motionArchNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionArchNB, this, angle);
    return retval;
}
int CMobotGroup::motionInchwormLeft(int num) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMG_motionInchwormLeft_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionInchwormLeft, this, num);
    return retval;
}
int CMobotGroup::motionInchwormLeftNB(int num) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMG_motionInchwormLeftNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionInchwormLeftNB, this, num);
    return retval;
}
int CMobotGroup::motionInchwormRight(int num) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMG_motionInchwormRight_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionInchwormRight, this, num);
    return retval;
}
int CMobotGroup::motionInchwormRightNB(int num) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMG_motionInchwormRightNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionInchwormRightNB, this, num);
    return retval;
}
int CMobotGroup::motionRollBackward(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMG_motionRollBackward_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionRollBackward, this, angle);
    return retval;
}
int CMobotGroup::motionRollBackwardNB(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMG_motionRollBackwardNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionRollBackwardNB, this, angle);
    return retval;
}
int CMobotGroup::motionRollForward(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMG_motionRollForward_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionRollForward, this, angle);
    return retval;
}
int CMobotGroup::motionRollForwardNB(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMG_motionRollForwardNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionRollForwardNB, this, angle);
    return retval;
}
int CMobotGroup::motionSkinny(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMG_motionSkinny_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionSkinny, this, angle);
    return retval;
}
int CMobotGroup::motionSkinnyNB(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMG_motionSkinnyNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionSkinnyNB, this, angle);
    return retval;
}
int CMobotGroup::motionStand() {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMG_motionStand_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this);
    return retval;
}
int CMobotGroup::motionStandNB() {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMG_motionStandNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionStandNB, this);
    return retval;
}
int CMobotGroup::motionTurnLeft(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMG_motionTurnLeft_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionTurnLeft, this, angle);
    return retval;
}
int CMobotGroup::motionTurnLeftNB(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMG_motionTurnLeftNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionTurnLeftNB, this, angle);
    return retval;
}
int CMobotGroup::motionTurnRight(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMG_motionTurnRight_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionTurnRight, this, angle);
    return retval;
}
int CMobotGroup::motionTurnRightNB(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMG_motionTurnRightNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionTurnRightNB, this, angle);
    return retval;
}
int CMobotGroup::motionTumbleBackward(int num) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMG_motionTumbleBackward_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionTumbleBackward, this, num);
    return retval;
}
int CMobotGroup::motionTumbleBackwardNB(int num) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMG_motionTumbleBackwardNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionTumbleBackwardNB, this, num);
    return retval;
}
int CMobotGroup::motionTumbleForward(int num) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMG_motionTumbleForward_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionTumbleForward, this, num);
    return retval;
}
int CMobotGroup::motionTumbleForwardNB(int num) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMG_motionTumbleForwardNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionTumbleForwardNB, this, num);
    return retval;
}
int CMobotGroup::motionUnstand() {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMG_motionUnstand_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this);
    return retval;
}
int CMobotGroup::motionUnstandNB() {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMG_motionUnstandNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionUnstandNB, this);
    return retval;
}
int CMobotGroup::motionWait() {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMG_motionWait_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionWait, this);
    return retval;
}
int CMobotGroup::move(double angle1, double angle2, double angle3, double angle4) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMG_move_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, move, this, angle1, angle2, angle3, angle4);
    return retval;
}
int CMobotGroup::moveNB(double angle1, double angle2, double angle3, double angle4) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMG_moveNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveNB, this, angle1, angle2, angle3, angle4);
    return retval;
}
int CMobotGroup::moveContinuousNB(int dir1, int dir2, int dir3, int dir4) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMG_moveContinuousNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveContinuousNB, this, dir1, dir2, dir3, dir4);
    return retval;
}
int CMobotGroup::moveContinuousTime(int dir1, int dir2, int dir3, int dir4, double seconds) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMG_moveContinuousTime_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveContinuousTime, this, dir1, dir2, dir3, dir4, seconds);
    return retval;
}
int CMobotGroup::moveJointContinuousNB(int id, int dir) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMG_moveJointContinuousNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointContinuousNB, this, id, dir);
    return retval;
}
int CMobotGroup::moveJointContinuousTime(int id, int dir, double seconds) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMG_moveJointContinuousTime_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointContinuousTime, this, id, dir, seconds);
    return retval;
}
int CMobotGroup::moveJointTo(int id, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMG_moveJointTo_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointTo, this, id, angle);
    return retval;
}
int CMobotGroup::moveJointToNB(int id, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMG_moveJointToNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointToNB, this, id, angle);
    return retval;
}
int CMobotGroup::moveJointWait(int id) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMG_moveJointWait_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointWait, this, id);
    return retval;
}
int CMobotGroup::moveTo(double angle1, double angle2, double angle3, double angle4) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMG_moveTo_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveTo, this, angle1, angle2, angle3, angle4);
    return retval;
}
int CMobotGroup::moveToNB(double angle1, double angle2, double angle3, double angle4) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMG_moveToNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveToNB, this, angle1, angle2, angle3, angle4);
    return retval;
}
int CMobotGroup::moveToZero() {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMG_moveToZero_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveToZero, this);
    return retval;
}
int CMobotGroup::moveToZeroNB() {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMG_moveToZeroNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveToZeroNB, this);
    return retval;
}
int CMobotGroup::moveWait() {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMG_moveWait_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveWait, this);
    return retval;
}
int CMobotGroup::setJointSpeed(int id, double speed) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMG_setJointSpeed_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setJointSpeed, this, id, speed);
    return retval;
}
int CMobotGroup::setJointSpeeds(double speed1, double speed2, double speed3, double speed4) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMG_setJointSpeeds_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setJointSpeeds, this, speed1, speed2, speed3, speed4);
    return retval;
}
int CMobotGroup::setJointSpeedRatio(int id, double speed) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMG_setJointSpeedRatio_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setJointSpeedRatio, this, id, speed);
    return retval;
}
int CMobotGroup::setJointSpeedRatios(double ratio1, double ratio2, double ratio3, double ratio4) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMG_setJointSpeedRatios_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setJointSpeedRatios, this, ratio1, ratio2, ratio3, ratio4);
    return retval;
}
int CMobotGroup::setTwoWheelRobotSpeed(double speed, double radius) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMG_setTwoWheelRobotSpeed_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setTwoWheelRobotSpeed, this, speed, radius);
    return retval;
}
int CMobotGroup::stop() {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMG_stop_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, stop, this);
    return retval;
}
