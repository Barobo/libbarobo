#include <mobot.h>
#include <dlfcn.h>
#include <stdarg.h>

CMobot::CMobot() {
  void *fptr;
  /* Here to load the dynamically loaded library if necessary.
     g_chmobot_dlhandle is a global pointer pointing to the loaded DLL
     g_chmobot_dlcount is a global int counting instances for all classes
     They are declared in the header file class1_ch.h for Ch space.
     */
  if(g_chmobot_dlhandle == NULL || g_chmobot_dlcount == 0) {
    g_chmobot_dlhandle = dlopen("libmobot.dl", RTLD_LAZY);
    if(g_chmobot_dlhandle == NULL) {
      printf("Error: %s(): dlopen(): %s\n", __class_func__, dlerror());
      return;
    }
  }
  /* to get the address by function name */
  fptr = dlsym(g_chmobot_dlhandle, "CMobot_CMobot_chdl");
  if(fptr == NULL) {
    printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
    return;
  }
  /* to call the chdl function in dynamically loaded
     library by address */
  dlrunfun(fptr, NULL, NULL);
  g_chmobot_dlcount++; // to increase count of instance
}

CMobot::~CMobot() {
  void *fptr;
  fptr = dlsym(g_chmobot_dlhandle, "CMobot_dCMobot_chdl");
  if(fptr == NULL) {
    printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
    return;
  }
  /* call the chdl function in DLL by address */
  dlrunfun(fptr, NULL, NULL, this);
  g_chmobot_dlcount--; // to decrease count of instance
  if(g_chmobot_dlcount <= 0 && g_chmobot_dlhandle != NULL) {
    if(dlclose(g_chmobot_dlhandle)!=0)
      printf("Error: %s(): dlclose(): %s\n", __class_func__, dlerror());
  }
}

int CMobot::blinkLED(double delay, int numBlinks) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "blinkLED_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, delay, numBlinks);
    return retval;
}
int CMobot::connect() {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "connect_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this);
    return retval;
}
int CMobot::connectWithAddress(char *address, ...) {
    void *fptr;
    int retval;
    va_list ap;
    int channel = -1;
    va_start(ap, address);
  
    fptr = dlsym(g_chmobot_dlhandle, "connectWithAddress_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    if(va_count(ap) == 1) {
      channel = va_arg(ap, int);
      dlrunfun(fptr, &retval, connectWithAddress, this, address, channel);
    } else {
      dlrunfun(fptr, &retval, connectWithAddress, this, address);
    }
    va_end(ap);
    return retval;
}
int CMobot::connectWithBluetoothAddress(char *address, ...) {
    void *fptr;
    int retval;
    va_list ap;
    int channel = -1;
    va_start(ap, address);

    fptr = dlsym(g_chmobot_dlhandle, "connectWithBluetoothAddress_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    if(va_count(ap) == 1) {
      channel = va_arg(ap, int);
      dlrunfun(fptr, &retval, connectWithBluetoothAddress, this, address, channel);
    } else {
      dlrunfun(fptr, &retval, connectWithBluetoothAddress, this, address);
    }
    va_end(ap);
    return retval;
}
int CMobot::connectWithIPAddress(char *address, ...) {
    void *fptr;
    int retval;
    va_list ap;
    char* port = NULL;
    va_start(ap, address);

    fptr = dlsym(g_chmobot_dlhandle, "connectWithIPAddress_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    if(va_count(ap) == 1) {
      port = va_arg(ap, char*);
      dlrunfun(fptr, &retval, connectWithIPAddress, this, address, port);
    } else {
      dlrunfun(fptr, &retval, connectWithIPAddress, this, address);
    }
    va_end(ap);
    return retval;
}
int CMobot::disconnect() {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "disconnect_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, disconnect, this);
    return retval;
}
int CMobot::disableButtonCallback() {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "disableButtonCallback_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this);
    return retval;
}
int CMobot::driveToDirect(double angle1, double angle2, double angle3, double angle4) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "driveToDirect_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, driveToDirect, this, angle1, angle2, angle3, angle4);
    return retval;
}
int CMobot::driveTo(double angle1, double angle2, double angle3, double angle4) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "driveTo_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, driveTo, this, angle1, angle2, angle3, angle4);
    return retval;
}
int CMobot::driveToDirectNB(double angle1, double angle2, double angle3, double angle4) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "driveToDirectNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, driveToDirectNB, this, angle1, angle2, angle3, angle4);
    return retval;
}
int CMobot::driveToNB(double angle1, double angle2, double angle3, double angle4) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "driveToNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, driveToNB, this, angle1, angle2, angle3, angle4);
    return retval;
}
int CMobot::enableButtonCallback(void (*buttonCallback)(CMobot* robot, int button, int buttonDown)) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "enableButtonCallback_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, buttonCallback);
    return retval;
}
int CMobot::getJointAngle(int id, double & angle) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "getJointAngle_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, id, &angle);
    return retval;
}
int CMobot::getJointAngleAverage(int id, double & angle, ...) {
    void *fptr;
    int retval;
    int numReadings;
    va_list ap;
    va_start(ap, angle);

    fptr = dlsym(g_chmobot_dlhandle, "getJointAngleAverage_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    if(va_count(ap) == 1) {
      numReadings = va_arg(ap, int);
      dlrunfun(fptr, &retval, NULL, this, id, &angle, numReadings);
    } else {
      dlrunfun(fptr, &retval, NULL, this, id, &angle);
    }
    va_end(ap);
    return retval;
}
int CMobot::getJointAngles(double &angle1, double &angle2, double &angle3, double &angle4) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "getJointAngles_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, &angle1, &angle2, &angle3, &angle4);
    return retval;
}
int CMobot::getJointAnglesAverage(double &angle1, double &angle2, double &angle3, double &angle4, ...) {
    void *fptr;
    int retval;
    va_list ap;
    int numReadings;
    va_start(ap, angle4);

    fptr = dlsym(g_chmobot_dlhandle, "getJointAnglesAverage_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    if(va_count(ap) == 1) {
      numReadings = va_arg(ap, int);
      dlrunfun(fptr, &retval, NULL, this, &angle1, &angle2, &angle3, &angle4, numReadings);
    } else {
      dlrunfun(fptr, &retval, NULL, this, &angle1, &angle2, &angle3, &angle4);
    }
    va_end(ap);
    return retval;
}
int CMobot::getJointMaxSpeed(int id, double & speed) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "getJointMaxSpeed_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, id, &speed);
    return retval;
}
int CMobot::getJointSafetyAngle(double & angle) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "getJointSafetyAngle_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, &angle);
    return retval;
}
int CMobot::getJointSafetyAngleTimeout(double & seconds) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "getJointSafetyAngleTimeout_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, &seconds);
    return retval;
}
int CMobot::getJointSpeed(int id, double & speed) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "getJointSpeed_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, id, &speed);
    return retval;
}
int CMobot::getJointSpeeds(double &speed1, double &speed2, double &speed3, double &speed4) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "getJointSpeeds_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, &speed1, &speed2, &speed3, &speed4);
    return retval;
}
int CMobot::getJointSpeedRatio(int id, double & ratio) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "getJointSpeedRatio_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, id, &ratio);
    return retval;
}
int CMobot::getJointSpeedRatios(double &ratio1, double &ratio2, double &ratio3, double &ratio4) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "getJointSpeedRatios_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, &ratio1, &ratio2, &ratio3, &ratio4);
    return retval;
}
int CMobot::getJointState(int id, int & state) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "getJointState_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, id, &state);
    return retval;
}
int CMobot::isConnected() {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "isConnected_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, isConnected, this);
    return retval;
}
int CMobot::isMoving() {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "isMoving_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, isMoving, this);
    return retval;
}
int CMobot::motionArch(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "motionArch_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionArch, this, angle);
    return retval;
}
int CMobot::motionArchNB(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "motionArchNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionArchNB, this, angle);
    return retval;
}
int CMobot::motionDistance(double distance, double radius) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "motionDistance_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionDistance, this, distance, radius);
    return retval;
}
int CMobot::motionDistanceNB(double distance, double radius) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "motionDistanceNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionDistanceNB, this, distance, radius);
    return retval;
}
int CMobot::motionInchwormLeft(int num) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "motionInchwormLeft_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionInchwormLeft, this, num);
    return retval;
}
int CMobot::motionInchwormLeftNB(int num) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "motionInchwormLeftNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionInchwormLeftNB, this, num);
    return retval;
}
int CMobot::motionInchwormRight(int num) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "motionInchwormRight_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionInchwormRight, this, num);
    return retval;
}
int CMobot::motionInchwormRightNB(int num) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "motionInchwormRightNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionInchwormRightNB, this, num);
    return retval;
}
int CMobot::motionRollBackward(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "motionRollBackward_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionRollBackward, this, angle);
    return retval;
}
int CMobot::motionRollBackwardNB(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "motionRollBackwardNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionRollBackwardNB, this, angle);
    return retval;
}
int CMobot::motionRollForward(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "motionRollForward_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionRollForward, this, angle);
    return retval;
}
int CMobot::motionRollForwardNB(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "motionRollForwardNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionRollForwardNB, this, angle);
    return retval;
}
int CMobot::motionStand() {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "motionStand_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionStand, this);
    return retval;
}
int CMobot::motionStandNB() {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "motionStandNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionStandNB, this);
    return retval;
}
int CMobot::motionTurnLeft(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "motionTurnLeft_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionTurnLeft, this, angle);
    return retval;
}
int CMobot::motionTurnLeftNB(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "motionTurnLeftNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionTurnLeftNB, this, angle);
    return retval;
}
int CMobot::motionTurnRight(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "motionTurnRight_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionTurnRight, this, angle);
    return retval;
}
int CMobot::motionTurnRightNB(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "motionTurnRightNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionTurnRightNB, this, angle);
    return retval;
}
int CMobot::motionTumbleLeft(int num) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "motionTumbleLeft_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionTumbleLeft, this, num);
    return retval;
}
int CMobot::motionTumbleLeftNB(int num) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "motionTumbleLeftNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionTumbleLeftNB, this, num);
    return retval;
}
int CMobot::motionTumbleRight(int num) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "motionTumbleRight_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionTumbleRight, this, num);
    return retval;
}
int CMobot::motionTumbleRightNB(int num) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "motionTumbleRightNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionTumbleRightNB, this, num);
    return retval;
}
int CMobot::motionUnstand() {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "motionUnstand_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionUnstand, this);
    return retval;
}
int CMobot::motionUnstandNB() {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "motionUnstandNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionUnstandNB, this);
    return retval;
}
int CMobot::motionWait() {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "motionWait_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionWait, this);
    return retval;
}
int CMobot::move(double angle1, double angle2, double angle3, double angle4) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "move_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, move, this, angle1, angle2, angle3, angle4);
    return retval;
}
int CMobot::moveNB(double angle1, double angle2, double angle3, double angle4) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "moveNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveNB, this, angle1, angle2, angle3, angle4);
    return retval;
}
int CMobot::moveContinuousNB(int dir1, int dir2, int dir3, int dir4) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "moveContinuousNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveContinuousNB, this, dir1, dir2, dir3, dir4);
    return retval;
}
int CMobot::moveContinuousTime(int dir1, int dir2, int dir3, int dir4, double seconds) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "moveContinuousTime_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveContinuousTime, this, dir1, dir2, dir3, dir4, seconds);
    return retval;
}
int CMobot::moveJointContinuousNB(int id, int dir) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "moveJointContinuousNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointContinuousNB, this, id, dir);
    return retval;
}
int CMobot::moveJointContinuousTime(int id, int dir, double seconds) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "moveJointContinuousTime_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointContinuousTime, this, id, dir, seconds);
    return retval;
}
int CMobot::moveJoint(int id, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "moveJoint_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJoint, this, id, angle);
    return retval;
}
int CMobot::moveJointNB(int id, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "moveJointNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointNB, this, id, angle);
    return retval;
}
int CMobot::moveJointTo(int id, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "moveJointTo_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointTo, this, id, angle);
    return retval;
}
int CMobot::moveJointToDirect(int id, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "moveJointToDirect_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointToDirect, this, id, angle);
    return retval;
}
int CMobot::moveJointToNB(int id, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "moveJointToNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointToNB, this, id, angle);
    return retval;
}
int CMobot::moveJointToDirectNB(int id, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "moveJointToDirectNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointToDirectNB, this, id, angle);
    return retval;
}
int CMobot::moveJointWait(int id) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "moveJointWait_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointWait, this, id);
    return retval;
}
int CMobot::moveTo(double angle1, double angle2, double angle3, double angle4) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "moveTo_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveTo, this, angle1, angle2, angle3, angle4);
    return retval;
}
int CMobot::moveToDirect(double angle1, double angle2, double angle3, double angle4) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "moveToDirect_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveToDirect, this, angle1, angle2, angle3, angle4);
    return retval;
}
int CMobot::moveToNB(double angle1, double angle2, double angle3, double angle4) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "moveToNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveToNB, this, angle1, angle2, angle3, angle4);
    return retval;
}
int CMobot::moveToDirectNB(double angle1, double angle2, double angle3, double angle4) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "moveToDirectNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveToDirectNB, this, angle1, angle2, angle3, angle4);
    return retval;
}
int CMobot::moveToZero() {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "moveToZero_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveToZero, this);
    return retval;
}
int CMobot::moveToZeroNB() {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "moveToZeroNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveToZeroNB, this);
    return retval;
}
int CMobot::moveWait() {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "moveWait_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveWait, this);
    return retval;
}
int CMobot::recordAngle(int id, double time[:], double angle[:], int num, double seconds, ...) {
    void *fptr;
    int retval;
    va_list ap;
    double threshhold;
    va_start(ap, seconds);

    fptr = dlsym(g_chmobot_dlhandle, "recordAngle_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    if(va_count(ap) == 1) {
      threshhold = va_arg(ap, double);
      dlrunfun(fptr, &retval, recordAngle, this, id, time, angle, num, seconds, threshhold);
    } else {
      dlrunfun(fptr, &retval, recordAngle, this, id, time, angle, num, seconds);
    }
    va_end(ap);
    return retval;
}
int CMobot::recordAngleBegin(int id, double* &time, double* &angle, double seconds, ...) {
    void *fptr;
    int retval;
    va_list ap;
    double threshhold = 0.0;
    va_start(ap, seconds);

    fptr = dlsym(g_chmobot_dlhandle, "recordAngleBegin_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    if(va_count(ap) == 1) {
      threshhold = va_arg(ap, double);
      dlrunfun(fptr, &retval, NULL, this, id, &time, &angle, seconds, threshhold);
    } else {
      dlrunfun(fptr, &retval, NULL, this, id, &time, &angle, seconds);
    }
    va_end(ap);
    return retval;
}
int CMobot::recordAngleEnd(int id, int &num) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "recordAngleEnd_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, id, &num);
    return retval;
}
int CMobot::recordAngles(double time[:], double angle1[:], double angle2[:], double angle3[:], double angle4[:], int num, double seconds, ...) {
    void *fptr;
    int retval;
    va_list ap;
    double threshhold;
    va_start(ap, seconds);

    fptr = dlsym(g_chmobot_dlhandle, "recordAngles_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    if(va_count(ap) == 1) {
      threshhold = va_arg(ap, double);
      dlrunfun(fptr, &retval, recordAngles, this, time, angle1, angle2, angle3, angle4, num, seconds, threshhold);
    } else {
      dlrunfun(fptr, &retval, recordAngles, this, time, angle1, angle2, angle3, angle4, num, seconds);
    }
    return retval;
}
int CMobot::recordAnglesBegin(
    double* &time, 
    double* &angle1, 
    double* &angle2, 
    double* &angle3, 
    double* &angle4, 
    double seconds,
    ...) 
{
    void *fptr;
    int retval;
    double threshhold;
    va_list ap;
    va_start(ap, seconds);

    fptr = dlsym(g_chmobot_dlhandle, "recordAnglesBegin_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    if(va_count(ap) == 1) {
      threshhold = va_arg(ap, double);
      dlrunfun(fptr, &retval, NULL, this, 
          &time, 
          &angle1, 
          &angle2, 
          &angle3, 
          &angle4, 
          seconds, 
          threshhold);
    } else {
      dlrunfun(fptr, &retval, NULL, this, 
          &time, 
          &angle1, 
          &angle2, 
          &angle3, 
          &angle4, 
          seconds);
    }
    va_end(ap);
    return retval;
}
int CMobot::recordAnglesEnd(int &num) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "recordAnglesEnd_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, &num);
    return retval;
}
int CMobot::recordDistanceBegin(int id, double* &time, double* &distance, double radius, double seconds, ...) {
    void *fptr;
    int retval;
    va_list ap;
    double threshhold = 0.0;
    va_start(ap, seconds);

    fptr = dlsym(g_chmobot_dlhandle, "recordDistanceBegin_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    if(va_count(ap) == 1) {
      threshhold = va_arg(ap, double);
      dlrunfun(fptr, &retval, NULL, this, id, &time, &distance, radius, seconds, threshhold);
    } else {
      dlrunfun(fptr, &retval, NULL, this, id, &time, &distance, radius, seconds);
    }
    va_end(ap);
    return retval;
}
int CMobot::recordDistanceEnd(int id, int &num) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "recordDistanceEnd_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, id, &num);
    return retval;
}
int CMobot::recordDistancesBegin(
    double* &time, 
    double* &distance1, 
    double* &distance2, 
    double* &distance3, 
    double* &distance4, 
    double radius,
    double seconds,
    ...) 
{
    void *fptr;
    int retval;
    double threshhold;
    va_list ap;
    va_start(ap, seconds);

    fptr = dlsym(g_chmobot_dlhandle, "recordDistancesBegin_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    if(va_count(ap) == 1) {
      threshhold = va_arg(ap, double);
      dlrunfun(fptr, &retval, NULL, this, 
          &time, 
          &distance1, 
          &distance2, 
          &distance3, 
          &distance4, 
          radius,
          seconds, 
          threshhold);
    } else {
      dlrunfun(fptr, &retval, NULL, this, 
          &time, 
          &distance1, 
          &distance2, 
          &distance3, 
          &distance4, 
          radius,
          seconds);
    }
    va_end(ap);
    return retval;
}
int CMobot::recordDistancesEnd(int &num) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "recordDistancesEnd_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, &num);
    return retval;
}
int CMobot::recordWait() {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "recordWait_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, recordWait, this);
    return retval;
}
int CMobot::reset() {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "reset_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, reset, this);
    return retval;
}
int CMobot::resetToZero() {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "resetToZero_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, resetToZero, this);
    return retval;
}
int CMobot::resetToZeroNB() {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "resetToZeroNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, resetToZeroNB, this);
    return retval;
}
int CMobot::setExitState(int exitState) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "setExitState_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setExitState, this, exitState);
    return retval;
}
int CMobot::setJointMovementStateNB(int id, int dir) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "setJointMovementStateNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setJointMovementStateNB, this, id, dir);
    return retval;
}
int CMobot::setJointMovementStateTime(int id, int dir, double seconds) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "setJointMovementStateTime_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setJointMovementStateTime, this, id, dir, seconds);
    return retval;
}
int CMobot::setJointSafetyAngle(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "setJointSafetyAngle_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setJointSafetyAngle, this, angle);
    return retval;
}
int CMobot::setJointSafetyAngleTimeout(double seconds) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "setJointSafetyAngleTimeout_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setJointSafetyAngleTimeout, this, seconds);
    return retval;
}
int CMobot::setJointSpeed(int id, double speed) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "setJointSpeed_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setJointSpeed, this, id, speed);
    return retval;
}
int CMobot::setJointSpeeds(double speed1, double speed2, double speed3, double speed4) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "setJointSpeeds_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setJointSpeeds, this, speed1, speed2, speed3, speed4);
    return retval;
}
int CMobot::setJointSpeedRatio(int id, double speed) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "setJointSpeedRatio_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setJointSpeedRatio, this, id, speed);
    return retval;
}
int CMobot::setJointSpeedRatios(double ratio1, double ratio2, double ratio3, double ratio4) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "setJointSpeedRatios_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, ratio1, ratio2, ratio3, ratio4);
    return retval;
}
int CMobot::setMotorPower(int id, int power) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "setMotorPower_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setMotorPower, this, id, power);
    return retval;
}
int CMobot::setMovementStateNB(int dir1, int dir2, int dir3, int dir4) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "setMovementStateNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setMovementStateNB, this, dir1, dir2, dir3, dir4);
    return retval;
}
int CMobot::setMovementStateTime(int dir1, int dir2, int dir3, int dir4, double seconds) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "setMovementStateTime_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setMovementStateTime, this, dir1, dir2, dir3, dir4, seconds);
    return retval;
}
int CMobot::setMovementStateTimeNB(int dir1, int dir2, int dir3, int dir4, double seconds) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "setMovementStateTimeNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setMovementStateTimeNB, this, dir1, dir2, dir3, dir4, seconds);
    return retval;
}
int CMobot::setTwoWheelRobotSpeed(double speed, double radius) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "setTwoWheelRobotSpeed_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setTwoWheelRobotSpeed, this, speed, radius);
    return retval;
}
int CMobot::stop() {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "stop_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, stop, this);
    return retval;
}
int CMobot::stopAllJoints() {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "stopAllJoints_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, stop, this);
    return retval;
}
int CMobot::stopOneJoint(int id) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "stopOneJoint_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, stopOneJoint, this, id);
    return retval;
}
int CMobot::stopTwoJoints(int id1, int id2) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "stopTwoJoints_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, stopTwoJoints, this, id1, id2);
    return retval;
}
int CMobot::stopThreeJoints(int id1, int id2, int id3) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chmobot_dlhandle, "stopThreeJoints_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, stopThreeJoints, this, id1, id2, id3);
    return retval;
}

/* CMobotGroup */

CMobotGroup::CMobotGroup() {
  void *fptr;
  /* Here to load the dynamically loaded library if necessary.
     CMobot::g_chmobot_dlhandle is a global pointer pointing to the loaded DLL
     CMobot::g_chmobot_dlcount is a global int counting instances for all classes
     They are declared in the header file class1_ch.h for Ch space.
     */
  if(CMobot::g_chmobot_dlhandle == NULL || CMobot::g_chmobot_dlcount == 0) {
    CMobot::g_chmobot_dlhandle = dlopen("libmobot.dl", RTLD_LAZY);
    if(CMobot::g_chmobot_dlhandle == NULL) {
      printf("Error: %s(): dlopen(): %s\n", __class_func__, dlerror());
      return;
    }
  }
  /* to get the address by function name */
  fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMobotGroup_CMobotGroup_chdl");
  if(fptr == NULL) {
    printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
    return;
  }
  /* to call the chdl function in dynamically loaded
     library by address */
  dlrunfun(fptr, NULL, NULL);
  CMobot::g_chmobot_dlcount++; // to increase count of instance
}

CMobotGroup::~CMobotGroup() {
  void *fptr;
  fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMobotGroup_dCMobotGroup_chdl");
  if(fptr == NULL) {
    printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
    return;
  }
  /* call the chdl function in DLL by address */
  dlrunfun(fptr, NULL, NULL, this);
  CMobot::g_chmobot_dlcount--; // to decrease count of instance
  if(CMobot::g_chmobot_dlcount <= 0 && CMobot::g_chmobot_dlhandle != NULL) {
    if(dlclose(CMobot::g_chmobot_dlhandle)!=0)
      printf("Error: %s(): dlclose(): %s\n", __class_func__, dlerror());
  }
}

int CMobotGroup::addRobot(CMobot &robot) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMG_addRobot_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, &robot);
    return retval;
}
int CMobotGroup::driveJointToDirect(int id, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMG_driveJointToDirect_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, driveJointToDirect, this, id, angle);
    return retval;
}
int CMobotGroup::driveJointToDirectNB(int id, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMG_driveJointToDirectNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, driveJointToDirectNB, this, id, angle);
    return retval;
}
int CMobotGroup::driveToDirect(double angle1, double angle2, double angle3, double angle4) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMG_driveToDirect_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, driveToDirect, this, angle1, angle2, angle3, angle4);
    return retval;
}
int CMobotGroup::driveTo(double angle1, double angle2, double angle3, double angle4) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMG_driveTo_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, driveTo, this, angle1, angle2, angle3, angle4);
    return retval;
}
int CMobotGroup::driveToDirectNB(double angle1, double angle2, double angle3, double angle4) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMG_driveToDirectNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, driveToDirectNB, this, angle1, angle2, angle3, angle4);
    return retval;
}
int CMobotGroup::driveToNB(double angle1, double angle2, double angle3, double angle4) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMG_driveToNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, driveToNB, this, angle1, angle2, angle3, angle4);
    return retval;
}
int CMobotGroup::isMoving() {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMG_isMoving_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, isMoving, this);
    return retval;
}
int CMobotGroup::motionArch(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMG_motionArch_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, angle);
    return retval;
}
int CMobotGroup::motionArchNB(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMG_motionArchNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionArchNB, this, angle);
    return retval;
}
int CMobotGroup::motionDistance(double distance, double radius) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMG_motionDistance_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, distance, radius);
    return retval;
}
int CMobotGroup::motionDistanceNB(double distance, double radius) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMG_motionDistanceNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionDistanceNB, this, distance, radius);
    return retval;
}
int CMobotGroup::motionInchwormLeft(int num) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMG_motionInchwormLeft_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionInchwormLeft, this, num);
    return retval;
}
int CMobotGroup::motionInchwormLeftNB(int num) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMG_motionInchwormLeftNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionInchwormLeftNB, this, num);
    return retval;
}
int CMobotGroup::motionInchwormRight(int num) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMG_motionInchwormRight_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionInchwormRight, this, num);
    return retval;
}
int CMobotGroup::motionInchwormRightNB(int num) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMG_motionInchwormRightNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionInchwormRightNB, this, num);
    return retval;
}
int CMobotGroup::motionRollBackward(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMG_motionRollBackward_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionRollBackward, this, angle);
    return retval;
}
int CMobotGroup::motionRollBackwardNB(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMG_motionRollBackwardNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionRollBackwardNB, this, angle);
    return retval;
}
int CMobotGroup::motionRollForward(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMG_motionRollForward_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionRollForward, this, angle);
    return retval;
}
int CMobotGroup::motionRollForwardNB(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMG_motionRollForwardNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionRollForwardNB, this, angle);
    return retval;
}
int CMobotGroup::motionSkinny(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMG_motionSkinny_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionSkinny, this, angle);
    return retval;
}
int CMobotGroup::motionSkinnyNB(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMG_motionSkinnyNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionSkinnyNB, this, angle);
    return retval;
}
int CMobotGroup::motionStand() {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMG_motionStand_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this);
    return retval;
}
int CMobotGroup::motionStandNB() {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMG_motionStandNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionStandNB, this);
    return retval;
}
int CMobotGroup::motionTurnLeft(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMG_motionTurnLeft_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionTurnLeft, this, angle);
    return retval;
}
int CMobotGroup::motionTurnLeftNB(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMG_motionTurnLeftNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionTurnLeftNB, this, angle);
    return retval;
}
int CMobotGroup::motionTurnRight(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMG_motionTurnRight_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionTurnRight, this, angle);
    return retval;
}
int CMobotGroup::motionTurnRightNB(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMG_motionTurnRightNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionTurnRightNB, this, angle);
    return retval;
}
int CMobotGroup::motionTumbleRight(int num) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMG_motionTumbleRight_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionTumbleRight, this, num);
    return retval;
}
int CMobotGroup::motionTumbleRightNB(int num) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMG_motionTumbleRightNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionTumbleRightNB, this, num);
    return retval;
}
int CMobotGroup::motionTumbleLeft(int num) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMG_motionTumbleLeft_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionTumbleLeft, this, num);
    return retval;
}
int CMobotGroup::motionTumbleLeftNB(int num) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMG_motionTumbleLeftNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionTumbleLeftNB, this, num);
    return retval;
}
int CMobotGroup::motionUnstand() {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMG_motionUnstand_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this);
    return retval;
}
int CMobotGroup::motionUnstandNB() {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMG_motionUnstandNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionUnstandNB, this);
    return retval;
}
int CMobotGroup::motionWait() {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMG_motionWait_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionWait, this);
    return retval;
}
int CMobotGroup::move(double angle1, double angle2, double angle3, double angle4) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMG_move_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, move, this, angle1, angle2, angle3, angle4);
    return retval;
}
int CMobotGroup::moveNB(double angle1, double angle2, double angle3, double angle4) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMG_moveNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveNB, this, angle1, angle2, angle3, angle4);
    return retval;
}
int CMobotGroup::moveContinuousNB(int dir1, int dir2, int dir3, int dir4) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMG_moveContinuousNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveContinuousNB, this, dir1, dir2, dir3, dir4);
    return retval;
}
int CMobotGroup::moveContinuousTime(int dir1, int dir2, int dir3, int dir4, double seconds) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMG_moveContinuousTime_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveContinuousTime, this, dir1, dir2, dir3, dir4, seconds);
    return retval;
}
int CMobotGroup::moveJointContinuousNB(int id, int dir) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMG_moveJointContinuousNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointContinuousNB, this, id, dir);
    return retval;
}
int CMobotGroup::moveJointContinuousTime(int id, int dir, double seconds) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMG_moveJointContinuousTime_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointContinuousTime, this, id, dir, seconds);
    return retval;
}
int CMobotGroup::moveJointTo(int id, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMG_moveJointTo_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointTo, this, id, angle);
    return retval;
}
int CMobotGroup::moveJointToDirect(int id, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMG_moveJointToDirect_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointToDirect, this, id, angle);
    return retval;
}
int CMobotGroup::moveJointToNB(int id, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMG_moveJointToNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointToNB, this, id, angle);
    return retval;
}
int CMobotGroup::moveJointToDirectNB(int id, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMG_moveJointToDirectNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointToDirectNB, this, id, angle);
    return retval;
}
int CMobotGroup::moveJointWait(int id) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMG_moveJointWait_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointWait, this, id);
    return retval;
}
int CMobotGroup::moveTo(double angle1, double angle2, double angle3, double angle4) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMG_moveTo_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveTo, this, angle1, angle2, angle3, angle4);
    return retval;
}
int CMobotGroup::moveToDirect(double angle1, double angle2, double angle3, double angle4) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMG_moveToDirect_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveToDirect, this, angle1, angle2, angle3, angle4);
    return retval;
}
int CMobotGroup::moveToNB(double angle1, double angle2, double angle3, double angle4) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMG_moveToNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveToNB, this, angle1, angle2, angle3, angle4);
    return retval;
}
int CMobotGroup::moveToDirectNB(double angle1, double angle2, double angle3, double angle4) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMG_moveToDirectNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveToDirectNB, this, angle1, angle2, angle3, angle4);
    return retval;
}
int CMobotGroup::moveToZero() {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMG_moveToZero_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveToZero, this);
    return retval;
}
int CMobotGroup::moveToZeroNB() {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMG_moveToZeroNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveToZeroNB, this);
    return retval;
}
int CMobotGroup::moveWait() {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMG_moveWait_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveWait, this);
    return retval;
}
int CMobotGroup::reset() {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMG_reset_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, reset, this);
    return retval;
}
int CMobotGroup::resetToZero() {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMG_resetToZero_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, resetToZero, this);
    return retval;
}
int CMobotGroup::resetToZeroNB() {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMG_resetToZeroNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, resetToZeroNB, this);
    return retval;
}
int CMobotGroup::setExitState(int exitState) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMG_setExitState_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setExitState, this, exitState);
    return retval;
}
int CMobotGroup::setJointMovementStateNB(int id, int dir) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMG_setJointMovementStateNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setJointMovementStateNB, this, id, dir);
    return retval;
}
int CMobotGroup::setJointMovementStateTime(int id, int dir, double seconds) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMG_setJointMovementStateTime_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setJointMovementStateTime, this, id, dir, seconds);
    return retval;
}
int CMobotGroup::setJointMovementStateTimeNB(int id, int dir, double seconds) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMG_setJointMovementStateTimeNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setJointMovementStateTimeNB, this, id, dir, seconds);
    return retval;
}
int CMobotGroup::setJointSafetyAngle(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMG_setJointSafetyAngle_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setJointSafetyAngle, this, angle);
    return retval;
}
int CMobotGroup::setJointSafetyAngleTimeout(double seconds) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMG_setJointSafetyAngleTimeout_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setJointSafetyAngleTimeout, this, seconds);
    return retval;
}
int CMobotGroup::setJointSpeed(int id, double speed) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMG_setJointSpeed_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setJointSpeed, this, id, speed);
    return retval;
}
int CMobotGroup::setJointSpeeds(double speed1, double speed2, double speed3, double speed4) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMG_setJointSpeeds_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setJointSpeeds, this, speed1, speed2, speed3, speed4);
    return retval;
}
int CMobotGroup::setJointSpeedRatio(int id, double speed) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMG_setJointSpeedRatio_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setJointSpeedRatio, this, id, speed);
    return retval;
}
int CMobotGroup::setJointSpeedRatios(double ratio1, double ratio2, double ratio3, double ratio4) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMG_setJointSpeedRatios_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setJointSpeedRatios, this, ratio1, ratio2, ratio3, ratio4);
    return retval;
}
int CMobotGroup::setMovementStateNB(int dir1, int dir2, int dir3, int dir4) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMG_setMovementStateNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setMovementStateNB, this, dir1, dir2, dir3, dir4);
    return retval;
}
int CMobotGroup::setMovementStateTime(int dir1, int dir2, int dir3, int dir4, double seconds) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMG_setMovementStateTime_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setMovementStateTime, this, dir1, dir2, dir3, dir4, seconds);
    return retval;
}
int CMobotGroup::setMovementStateTimeNB(int dir1, int dir2, int dir3, int dir4, double seconds) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMG_setMovementStateTimeNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setMovementStateTimeNB, this, dir1, dir2, dir3, dir4, seconds);
    return retval;
}
int CMobotGroup::setTwoWheelRobotSpeed(double speed, double radius) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMG_setTwoWheelRobotSpeed_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setTwoWheelRobotSpeed, this, speed, radius);
    return retval;
}
int CMobotGroup::stopAllJoints() {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMG_stopAllJoints_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, stopAllJoints, this);
    return retval;
}
int CMobotGroup::stopOneJoint(int id) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMG_stopOneJoint_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, stopOneJoint, this, id);
    return retval;
}
int CMobotGroup::stopTwoJoints(int id1, int id2) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMG_stopTwoJoints_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, stopTwoJoints, this, id1, id2);
    return retval;
}
int CMobotGroup::stopThreeJoints(int id1, int id2, int id3) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMG_stopThreeJoints_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, stopThreeJoints, this, id1, id2, id3);
    return retval;
}
