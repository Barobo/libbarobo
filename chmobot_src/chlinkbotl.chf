#include <mobot.h>
#include <linkbot.h>
#include <dlfcn.h>
#include <stdarg.h>
#include <array.h>

CLinkbotL::CLinkbotL() {
  void *fptr;
  /* Here to load the dynamically loaded library if necessary.
     CMobot::g_chmobot_dlhandle is a global pointer pointing to the loaded DLL
     CMobot::g_chmobot_dlcount is a global int counting instances for all classes
     They are declared in the header file class1_ch.h for Ch space.
     */
  if(CMobot::g_chmobot_dlhandle == NULL || CMobot::g_chmobot_dlcount == 0) {
    CMobot::g_chmobot_dlhandle = dlopen("libmobot.dl", RTLD_LAZY);
    if(CMobot::g_chmobot_dlhandle == NULL) {
      printf("Error: %s(): dlopen(): %s\n", __class_func__, dlerror());
      return;
    }
  }
  /* to get the address by function name */
  fptr = dlsym(CMobot::g_chmobot_dlhandle, "CLinkbotL_CLinkbotL_chdl");
  if(fptr == NULL) {
    printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
    return;
  }
  /* to call the chdl function in dynamically loaded
     library by address */
  dlrunfun(fptr, NULL, NULL);
  CMobot::g_chmobot_dlcount++; // to increase count of instance
}

CLinkbotL::~CLinkbotL() {
  void *fptr;
  fptr = dlsym(CMobot::g_chmobot_dlhandle, "CLinkbotL_dCLinkbotL_chdl");
  if(fptr == NULL) {
    printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
    return;
  }
  /* call the chdl function in DLL by address */
  dlrunfun(fptr, NULL, NULL, this);
  CMobot::g_chmobot_dlcount--; // to decrease count of instance
  if(CMobot::g_chmobot_dlcount <= 0 && CMobot::g_chmobot_dlhandle != NULL) {
    if(dlclose(CMobot::g_chmobot_dlhandle)!=0)
      printf("Error: %s(): dlclose(): %s\n", __class_func__, dlerror());
  }
}

int CLinkbotL::blinkLED(double delay, int numBlinks) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotL_blinkLED_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, delay, numBlinks);
    return retval;
}
int CLinkbotL::connect() {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotL_connect_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this);
    return retval;
}
int CLinkbotL::connectWithAddress(char *address, ...) {
    void *fptr;
    int retval;
    va_list ap;
    int channel = -1;
    va_start(ap, address);
  
    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotL_connectWithAddress_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    if(va_count(ap) == 1) {
      channel = va_arg(ap, int);
      dlrunfun(fptr, &retval, connectWithAddress, this, address, channel);
    } else {
      dlrunfun(fptr, &retval, connectWithAddress, this, address);
    }
    va_end(ap);
    return retval;
}
int CLinkbotL::connectWithIPAddress(char *address, ...) {
    void *fptr;
    int retval;
    va_list ap;
    char* port = NULL;
    va_start(ap, address);

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotL_connectWithIPAddress_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    if(va_count(ap) == 1) {
      port = va_arg(ap, char*);
      dlrunfun(fptr, &retval, connectWithIPAddress, this, address, port);
    } else {
      dlrunfun(fptr, &retval, connectWithIPAddress, this, address);
    }
    va_end(ap);
    return retval;
}
int CLinkbotL::connectWithSerialID(char *address) {
    void *fptr;
    int retval;
    va_list ap;
    char* port = NULL;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotL_connectWithSerialID_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, connectWithSerialID, this, address);
    return retval;
}
int CLinkbotL::disconnect() {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotL_disconnect_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, disconnect, this);
    return retval;
}
int CLinkbotL::disableButtonCallback() {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotL_disableButtonCallback_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this);
    return retval;
}
int CLinkbotL::driveToDirect(double angle1, double angle2, double angle3) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotL_driveToDirect_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, driveToDirect, this, angle1, angle2, angle3);
    return retval;
}
int CLinkbotL::driveTo(double angle1, double angle2, double angle3) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotL_driveTo_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, driveTo, this, angle1, angle2, angle3);
    return retval;
}
int CLinkbotL::driveToDirectNB(double angle1, double angle2, double angle3) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotL_driveToDirectNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, driveToDirectNB, this, angle1, angle2, angle3);
    return retval;
}
int CLinkbotL::driveToNB(double angle1, double angle2, double angle3) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotL_driveToNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, driveToNB, this, angle1, angle2, angle3);
    return retval;
}
int CLinkbotL::enableButtonCallback(void (*buttonCallback)(CLinkbotL* robot, int button, int buttonDown)) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotL_enableButtonCallback_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, buttonCallback);
    return retval;
}
int CLinkbotL::getAccelerometerData(double & x, double & y, double & z) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotL_getAccelerometerData_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, &x, &y, &z);
    return retval;
}
int CLinkbotL::getBatteryVoltage(double & voltage) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotL_getBatteryVoltage_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, &voltage);
    return retval;
}
int CLinkbotL::getColorRGB(int & r, int & g, int & b) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotL_getColorRGB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, &r, &g, &b);
    return retval;
}
int CLinkbotL::getFormFactor(int & formFactor) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotL_getFormFactor_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, &formFactor);
    return retval;
}
int CLinkbotL::getJointAngle(int id, double & angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotL_getJointAngle_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, id, &angle);
    return retval;
}
int CLinkbotL::getJointAngleAverage(int id, double & angle, ...) {
    void *fptr;
    int retval;
    int numReadings;
    va_list ap;
    va_start(ap, angle);

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotL_getJointAngleAverage_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    if(va_count(ap) == 1) {
      numReadings = va_arg(ap, int);
      dlrunfun(fptr, &retval, NULL, this, id, &angle, numReadings);
    } else {
      dlrunfun(fptr, &retval, NULL, this, id, &angle);
    }
    va_end(ap);
    return retval;
}
int CLinkbotL::getJointAngles(double &angle1, double &angle2, double &angle3) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotL_getJointAngles_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, &angle1, &angle2, &angle3);
    return retval;
}
int CLinkbotL::getJointAnglesAverage(double &angle1, double &angle2, double &angle3, ...) {
    void *fptr;
    int retval;
    va_list ap;
    int numReadings;
    va_start(ap, angle3);

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotL_getJointAnglesAverage_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    if(va_count(ap) == 1) {
      numReadings = va_arg(ap, int);
      dlrunfun(fptr, &retval, NULL, this, &angle1, &angle2, &angle3, numReadings);
    } else {
      dlrunfun(fptr, &retval, NULL, this, &angle1, &angle2, &angle3);
    }
    va_end(ap);
    return retval;
}
int CLinkbotL::getJointMaxSpeed(int id, double & speed) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotL_getJointMaxSpeed_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, id, &speed);
    return retval;
}
int CLinkbotL::getJointSafetyAngle(double & angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotL_getJointSafetyAngle_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, &angle);
    return retval;
}
int CLinkbotL::getJointSafetyAngleTimeout(double & seconds) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotL_getJointSafetyAngleTimeout_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, &seconds);
    return retval;
}
int CLinkbotL::getJointSpeed(int id, double & speed) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotL_getJointSpeed_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, id, &speed);
    return retval;
}
int CLinkbotL::getJointSpeeds(double &speed1, double &speed2, double &speed3) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotL_getJointSpeeds_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, &speed1, &speed2, &speed3);
    return retval;
}
int CLinkbotL::getJointSpeedRatio(int id, double & ratio) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotL_getJointSpeedRatio_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, id, &ratio);
    return retval;
}
int CLinkbotL::getJointSpeedRatios(double &ratio1, double &ratio2, double &ratio3) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotL_getJointSpeedRatios_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, &ratio1, &ratio2, &ratio3);
    return retval;
}
int CLinkbotL::getJointState(int id, int & state) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotL_getJointState_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, id, &state);
    return retval;
}
int CLinkbotL::isConnected() {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotL_isConnected_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, isConnected, this);
    return retval;
}
int CLinkbotL::isMoving() {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotL_isMoving_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, isMoving, this);
    return retval;
}
int CLinkbotL::move(double angle1, double angle2, double angle3) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotL_move_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, move, this, angle1, angle2, angle3);
    return retval;
}
int CLinkbotL::moveNB(double angle1, double angle2, double angle3) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotL_moveNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveNB, this, angle1, angle2, angle3);
    return retval;
}
int CLinkbotL::moveContinuousNB(int dir1, int dir2, int dir3) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotL_moveContinuousNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveContinuousNB, this, dir1, dir2, dir3);
    return retval;
}
int CLinkbotL::moveContinuousTime(int dir1, int dir2, int dir3, double seconds) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotL_moveContinuousTime_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveContinuousTime, this, dir1, dir2, dir3, seconds);
    return retval;
}
int CLinkbotL::moveJointContinuousNB(int id, int dir) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotL_moveJointContinuousNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointContinuousNB, this, id, dir);
    return retval;
}
int CLinkbotL::moveJointContinuousTime(int id, int dir, double seconds) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotL_moveJointContinuousTime_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointContinuousTime, this, id, dir, seconds);
    return retval;
}
int CLinkbotL::moveJoint(int id, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotL_moveJoint_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJoint, this, id, angle);
    return retval;
}
int CLinkbotL::moveJointNB(int id, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotL_moveJointNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointNB, this, id, angle);
    return retval;
}
int CLinkbotL::moveJointTo(int id, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotL_moveJointTo_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointTo, this, id, angle);
    return retval;
}
int CLinkbotL::moveJointToDirect(int id, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotL_moveJointToDirect_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointToDirect, this, id, angle);
    return retval;
}
int CLinkbotL::moveJointToNB(int id, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotL_moveJointToNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointToNB, this, id, angle);
    return retval;
}
int CLinkbotL::moveJointToDirectNB(int id, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotL_moveJointToDirectNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointToDirectNB, this, id, angle);
    return retval;
}
int CLinkbotL::moveJointWait(int id) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotL_moveJointWait_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointWait, this, id);
    return retval;
}
int CLinkbotL::moveTo(double angle1, double angle2, double angle3) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotL_moveTo_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveTo, this, angle1, angle2, angle3);
    return retval;
}
int CLinkbotL::moveToDirect(double angle1, double angle2, double angle3) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotL_moveToDirect_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveToDirect, this, angle1, angle2, angle3);
    return retval;
}
int CLinkbotL::moveToNB(double angle1, double angle2, double angle3) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotL_moveToNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveToNB, this, angle1, angle2, angle3);
    return retval;
}
int CLinkbotL::moveToDirectNB(double angle1, double angle2, double angle3) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotL_moveToDirectNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveToDirectNB, this, angle1, angle2, angle3);
    return retval;
}
int CLinkbotL::moveToZero() {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotL_moveToZero_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveToZero, this);
    return retval;
}
int CLinkbotL::moveToZeroNB() {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotL_moveToZeroNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveToZeroNB, this);
    return retval;
}
int CLinkbotL::moveWait() {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotL_moveWait_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveWait, this);
    return retval;
}
int CLinkbotL::recordAngle(int id, double time[:], double angle[:], int num, double seconds, ...) {
    void *fptr;
    int retval;
    va_list ap;
    int shiftData;
    va_start(ap, seconds);

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotL_recordAngle_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    if(va_count(ap) == 1) {
      shiftData = va_arg(ap, int);
      dlrunfun(fptr, &retval, recordAngle, this, id, time, angle, num, seconds, shiftData);
    } else {
      dlrunfun(fptr, &retval, recordAngle, this, id, time, angle, num, seconds);
    }
    va_end(ap);
    return retval;
}
int CLinkbotL::recordAngleBegin(int id, double* &time, double* &angle, double seconds, ...) {
    void *fptr;
    int retval;
    va_list ap;
    int shiftData = 1;
    va_start(ap, seconds);

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotL_recordAngleBegin_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    if(va_count(ap) == 1) {
      shiftData = va_arg(ap, int);
      dlrunfun(fptr, &retval, NULL, this, id, &time, &angle, seconds, shiftData);
    } else {
      dlrunfun(fptr, &retval, NULL, this, id, &time, &angle, seconds);
    }
    va_end(ap);
    return retval;
}
int CLinkbotL::recordAngleEnd(int id, int &num) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotL_recordAngleEnd_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, id, &num);
    return retval;
}
int CLinkbotL::recordAngles(double time[:], double angle1[:], double angle2[:], double angle3[:], int num, double seconds, ...) {
    void *fptr;
    int retval;
    va_list ap;
    int shiftData;
    va_start(ap, seconds);

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotL_recordAngles_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    if(va_count(ap) == 1) {
      shiftData = va_arg(ap, int);
      dlrunfun(fptr, &retval, recordAngles, this, time, angle1, angle2, angle3, num, seconds, shiftData);
    } else {
      dlrunfun(fptr, &retval, recordAngles, this, time, angle1, angle2, angle3, num, seconds);
    }
    return retval;
}
int CLinkbotL::recordAnglesBegin(
    double* &time, 
    double* &angle1, 
    double* &angle2, 
    double* &angle3, 
    double seconds,
    ...) 
{
    void *fptr;
    int retval;
    int shiftData;
    va_list ap;
    va_start(ap, seconds);

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotL_recordAnglesBegin_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    if(va_count(ap) == 1) {
      shiftData = va_arg(ap, int);
      dlrunfun(fptr, &retval, NULL, this, 
          &time, 
          &angle1, 
          &angle2, 
          &angle3, 
          seconds, 
          shiftData);
    } else {
      dlrunfun(fptr, &retval, NULL, this, 
          &time, 
          &angle1, 
          &angle2, 
          &angle3, 
          seconds);
    }
    va_end(ap);
    return retval;
}
int CLinkbotL::recordAnglesEnd(int &num) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotL_recordAnglesEnd_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, &num);
    return retval;
}
int CLinkbotL::recordDistanceBegin(int id, double* &time, double* &distance, double radius, double seconds, ...) {
    void *fptr;
    int retval;
    va_list ap;
    int shiftData = 1;
    va_start(ap, seconds);

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotL_recordDistanceBegin_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    if(va_count(ap) == 1) {
      shiftData = va_arg(ap, int);
      dlrunfun(fptr, &retval, NULL, this, id, &time, &distance, radius, seconds, shiftData);
    } else {
      dlrunfun(fptr, &retval, NULL, this, id, &time, &distance, radius, seconds);
    }
    va_end(ap);
    return retval;
}
int CLinkbotL::recordDistanceEnd(int id, int &num) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotL_recordDistanceEnd_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, id, &num);
    return retval;
}
int CLinkbotL::recordDistancesBegin(
    double* &time, 
    double* &distance1, 
    double* &distance2, 
    double* &distance3, 
    double radius,
    double seconds,
    ...) 
{
    void *fptr;
    int retval;
    int shiftData;
    va_list ap;
    va_start(ap, seconds);

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotL_recordDistancesBegin_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    if(va_count(ap) == 1) {
      shiftData = va_arg(ap, int);
      dlrunfun(fptr, &retval, NULL, this, 
          &time, 
          &distance1, 
          &distance2, 
          &distance3, 
          radius,
          seconds, 
          shiftData);
    } else {
      dlrunfun(fptr, &retval, NULL, this, 
          &time, 
          &distance1, 
          &distance2, 
          &distance3, 
          radius,
          seconds);
    }
    va_end(ap);
    return retval;
}
int CLinkbotL::recordDistancesEnd(int &num) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotL_recordDistancesEnd_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, &num);
    return retval;
}
int CLinkbotL::recordWait() {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotL_recordWait_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, recordWait, this);
    return retval;
}
int CLinkbotL::reset() {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotL_reset_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, reset, this);
    return retval;
}
int CLinkbotL::resetToZero() {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotL_resetToZero_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, resetToZero, this);
    return retval;
}
int CLinkbotL::resetToZeroNB() {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotL_resetToZeroNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, resetToZeroNB, this);
    return retval;
}
int CLinkbotL::setBuzzerFrequency(int frequency, double time) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotL_setBuzzerFrequency_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setBuzzerFrequency, this, frequency, time);
    return retval;
}
int CLinkbotL::setBuzzerFrequencyOn(int frequency) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotL_setBuzzerFrequencyOn_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setBuzzerFrequencyOn, this, frequency);
    return retval;
}
int CLinkbotL::setBuzzerFrequencyOff() {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotL_setBuzzerFrequencyOff_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setBuzzerFrequencyOff, this);
    return retval;
}
int CLinkbotL::setColorRGB(int r, int g, int b) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotL_setColorRGB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setColorRGB, this, r, g, b);
    return retval;
}
int CLinkbotL::setExitState(int exitState) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotL_setExitState_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setExitState, this, exitState);
    return retval;
}
int CLinkbotL::setJointMovementStateNB(int id, int dir) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotL_setJointMovementStateNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setJointMovementStateNB, this, id, dir);
    return retval;
}
int CLinkbotL::setJointMovementStateTime(int id, int dir, double seconds) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotL_setJointMovementStateTime_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setJointMovementStateTime, this, id, dir, seconds);
    return retval;
}
int CLinkbotL::setJointSafetyAngle(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotL_setJointSafetyAngle_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setJointSafetyAngle, this, angle);
    return retval;
}
int CLinkbotL::setJointSafetyAngleTimeout(double seconds) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotL_setJointSafetyAngleTimeout_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setJointSafetyAngleTimeout, this, seconds);
    return retval;
}
int CLinkbotL::setJointSpeed(int id, double speed) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotL_setJointSpeed_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setJointSpeed, this, id, speed);
    return retval;
}
int CLinkbotL::setJointSpeeds(double speed1, double speed2, double speed3) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotL_setJointSpeeds_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setJointSpeeds, this, speed1, speed2, speed3);
    return retval;
}
int CLinkbotL::setJointSpeedRatio(int id, double speed) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotL_setJointSpeedRatio_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setJointSpeedRatio, this, id, speed);
    return retval;
}
int CLinkbotL::setJointSpeedRatios(double ratio1, double ratio2, double ratio3) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotL_setJointSpeedRatios_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, ratio1, ratio2, ratio3);
    return retval;
}
int CLinkbotL::setMotorPower(int id, int power) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotL_setMotorPower_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setMotorPower, this, id, power);
    return retval;
}
int CLinkbotL::setMovementStateNB(int dir1, int dir2, int dir3) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotL_setMovementStateNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setMovementStateNB, this, dir1, dir2, dir3);
    return retval;
}
int CLinkbotL::setMovementStateTime(int dir1, int dir2, int dir3, double seconds) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotL_setMovementStateTime_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setMovementStateTime, this, dir1, dir2, dir3, seconds);
    return retval;
}
int CLinkbotL::setMovementStateTimeNB(int dir1, int dir2, int dir3, double seconds) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotL_setMovementStateTimeNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setMovementStateTimeNB, this, dir1, dir2, dir3, seconds);
    return retval;
}
int CLinkbotL::setTwoWheelRobotSpeed(double speed, double radius) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotL_setTwoWheelRobotSpeed_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setTwoWheelRobotSpeed, this, speed, radius);
    return retval;
}
int CLinkbotL::stop() {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotL_stop_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, stop, this);
    return retval;
}
int CLinkbotL::stopAllJoints() {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotL_stopAllJoints_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, stop, this);
    return retval;
}
int CLinkbotL::stopOneJoint(int id) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotL_stopOneJoint_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, stopOneJoint, this, id);
    return retval;
}

/* CLinkbotLGroup */


CLinkbotLGroup::CLinkbotLGroup() {
  void *fptr;
  /* Here to load the dynamically loaded library if necessary.
     CMobot::g_chmobot_dlhandle is a global pointer pointing to the loaded DLL
     CMobot::g_chmobot_dlcount is a global int counting instances for all classes
     They are declared in the header file class1_ch.h for Ch space.
     */
  if(CMobot::g_chmobot_dlhandle == NULL || CMobot::g_chmobot_dlcount == 0) {
    CMobot::g_chmobot_dlhandle = dlopen("libmobot.dl", RTLD_LAZY);
    if(CMobot::g_chmobot_dlhandle == NULL) {
      printf("Error: %s(): dlopen(): %s\n", __class_func__, dlerror());
      return;
    }
  }
  /* to get the address by function name */
  fptr = dlsym(CMobot::g_chmobot_dlhandle, "CLinkbotLGroup_CLinkbotLGroup_chdl");
  if(fptr == NULL) {
    printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
    return;
  }
  /* to call the chdl function in dynamically loaded
     library by address */
  dlrunfun(fptr, NULL, NULL);
  CMobot::g_chmobot_dlcount++; // to increase count of instance
}

CLinkbotLGroup::~CLinkbotLGroup() {
  void *fptr;
  fptr = dlsym(CMobot::g_chmobot_dlhandle, "CLinkbotLGroup_dCLinkbotLGroup_chdl");
  if(fptr == NULL) {
    printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
    return;
  }
  /* call the chdl function in DLL by address */
  dlrunfun(fptr, NULL, NULL, this);
  CMobot::g_chmobot_dlcount--; // to decrease count of instance
  if(CMobot::g_chmobot_dlcount <= 0 && CMobot::g_chmobot_dlhandle != NULL) {
    if(dlclose(CMobot::g_chmobot_dlhandle)!=0)
      printf("Error: %s(): dlclose(): %s\n", __class_func__, dlerror());
  }
}

int CLinkbotLGroup::addRobot(CLinkbotL &robot) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGL_addRobot_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, &robot);
    return retval;
}
int CLinkbotLGroup::addRobots(array CLinkbotL robots[], ...) {
    void *fptr;
    int retval;
    int numRobots;
    va_list ap;
    va_start(ap, robots);

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGL_addRobots_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    if(va_count(ap) == 1) {
      numRobots = va_arg(ap, int);
    } else {
      numRobots = (int)shape(robots);
    }
    dlrunfun(fptr, &retval, NULL, this, robots, numRobots);
    va_end(ap);
    return retval;
}
int CLinkbotLGroup::connect() {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGL_connect_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this);
    return retval;
}
int CLinkbotLGroup::driveJointToDirect(int id, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGL_driveJointToDirect_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, driveJointToDirect, this, id, angle);
    return retval;
}
int CLinkbotLGroup::driveJointToDirectNB(int id, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGL_driveJointToDirectNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, driveJointToDirectNB, this, id, angle);
    return retval;
}
int CLinkbotLGroup::driveToDirect(double angle1, double angle2, double angle3) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGL_driveToDirect_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, driveToDirect, this, angle1, angle2, angle3);
    return retval;
}
int CLinkbotLGroup::driveTo(double angle1, double angle2, double angle3) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGL_driveTo_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, driveTo, this, angle1, angle2, angle3);
    return retval;
}
int CLinkbotLGroup::driveToDirectNB(double angle1, double angle2, double angle3) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGL_driveToDirectNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, driveToDirectNB, this, angle1, angle2, angle3);
    return retval;
}
int CLinkbotLGroup::driveToNB(double angle1, double angle2, double angle3) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGL_driveToNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, driveToNB, this, angle1, angle2, angle3);
    return retval;
}
int CLinkbotLGroup::isMoving() {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGL_isMoving_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, isMoving, this);
    return retval;
}
int CLinkbotLGroup::move(double angle1, double angle2, double angle3) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGL_move_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, move, this, angle1, angle2, angle3);
    return retval;
}
int CLinkbotLGroup::moveNB(double angle1, double angle2, double angle3) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGL_moveNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveNB, this, angle1, angle2, angle3);
    return retval;
}
int CLinkbotLGroup::moveContinuousNB(int dir1, int dir2, int dir3) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGL_moveContinuousNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveContinuousNB, this, dir1, dir2, dir3);
    return retval;
}
int CLinkbotLGroup::moveContinuousTime(int dir1, int dir2, int dir3, double seconds) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGL_moveContinuousTime_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveContinuousTime, this, dir1, dir2, dir3, seconds);
    return retval;
}
int CLinkbotLGroup::moveJointContinuousNB(int id, int dir) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGL_moveJointContinuousNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointContinuousNB, this, id, dir);
    return retval;
}
int CLinkbotLGroup::moveJointContinuousTime(int id, int dir, double seconds) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGL_moveJointContinuousTime_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointContinuousTime, this, id, dir, seconds);
    return retval;
}
int CLinkbotLGroup::moveJointTo(int id, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGL_moveJointTo_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointTo, this, id, angle);
    return retval;
}
int CLinkbotLGroup::moveJointToDirect(int id, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGL_moveJointToDirect_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointToDirect, this, id, angle);
    return retval;
}
int CLinkbotLGroup::moveJointToNB(int id, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGL_moveJointToNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointToNB, this, id, angle);
    return retval;
}
int CLinkbotLGroup::moveJointToDirectNB(int id, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGL_moveJointToDirectNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointToDirectNB, this, id, angle);
    return retval;
}
int CLinkbotLGroup::moveJointWait(int id) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGL_moveJointWait_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointWait, this, id);
    return retval;
}
int CLinkbotLGroup::moveTo(double angle1, double angle2, double angle3) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGL_moveTo_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveTo, this, angle1, angle2, angle3);
    return retval;
}
int CLinkbotLGroup::moveToDirect(double angle1, double angle2, double angle3) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGL_moveToDirect_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveToDirect, this, angle1, angle2, angle3);
    return retval;
}
int CLinkbotLGroup::moveToNB(double angle1, double angle2, double angle3) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGL_moveToNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveToNB, this, angle1, angle2, angle3);
    return retval;
}
int CLinkbotLGroup::moveToDirectNB(double angle1, double angle2, double angle3) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGL_moveToDirectNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveToDirectNB, this, angle1, angle2, angle3);
    return retval;
}
int CLinkbotLGroup::moveToZero() {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGL_moveToZero_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveToZero, this);
    return retval;
}
int CLinkbotLGroup::moveToZeroNB() {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGL_moveToZeroNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveToZeroNB, this);
    return retval;
}
int CLinkbotLGroup::moveWait() {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGL_moveWait_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveWait, this);
    return retval;
}
int CLinkbotLGroup::reset() {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGL_reset_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, reset, this);
    return retval;
}
int CLinkbotLGroup::resetToZero() {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGL_resetToZero_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, resetToZero, this);
    return retval;
}
int CLinkbotLGroup::resetToZeroNB() {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGL_resetToZeroNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, resetToZeroNB, this);
    return retval;
}
int CLinkbotLGroup::setExitState(int exitState) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGL_setExitState_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setExitState, this, exitState);
    return retval;
}
int CLinkbotLGroup::setJointMovementStateNB(int id, int dir) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGL_setJointMovementStateNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setJointMovementStateNB, this, id, dir);
    return retval;
}
int CLinkbotLGroup::setJointMovementStateTime(int id, int dir, double seconds) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGL_setJointMovementStateTime_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setJointMovementStateTime, this, id, dir, seconds);
    return retval;
}
int CLinkbotLGroup::setJointMovementStateTimeNB(int id, int dir, double seconds) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGL_setJointMovementStateTimeNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setJointMovementStateTimeNB, this, id, dir, seconds);
    return retval;
}
int CLinkbotLGroup::setJointSafetyAngle(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGL_setJointSafetyAngle_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setJointSafetyAngle, this, angle);
    return retval;
}
int CLinkbotLGroup::setJointSafetyAngleTimeout(double seconds) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGL_setJointSafetyAngleTimeout_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setJointSafetyAngleTimeout, this, seconds);
    return retval;
}
int CLinkbotLGroup::setJointSpeed(int id, double speed) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGL_setJointSpeed_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setJointSpeed, this, id, speed);
    return retval;
}
int CLinkbotLGroup::setJointSpeeds(double speed1, double speed2, double speed3) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGL_setJointSpeeds_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setJointSpeeds, this, speed1, speed2, speed3);
    return retval;
}
int CLinkbotLGroup::setJointSpeedRatio(int id, double speed) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGL_setJointSpeedRatio_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setJointSpeedRatio, this, id, speed);
    return retval;
}
int CLinkbotLGroup::setJointSpeedRatios(double ratio1, double ratio2, double ratio3) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGL_setJointSpeedRatios_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setJointSpeedRatios, this, ratio1, ratio2, ratio3);
    return retval;
}
int CLinkbotLGroup::setMovementStateNB(int dir1, int dir2, int dir3) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGL_setMovementStateNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setMovementStateNB, this, dir1, dir2, dir3);
    return retval;
}
int CLinkbotLGroup::setMovementStateTime(int dir1, int dir2, int dir3, double seconds) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGL_setMovementStateTime_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setMovementStateTime, this, dir1, dir2, dir3, seconds);
    return retval;
}
int CLinkbotLGroup::setMovementStateTimeNB(int dir1, int dir2, int dir3, double seconds) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGL_setMovementStateTimeNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setMovementStateTimeNB, this, dir1, dir2, dir3, seconds);
    return retval;
}
int CLinkbotLGroup::setTwoWheelRobotSpeed(double speed, double radius) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGL_setTwoWheelRobotSpeed_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setTwoWheelRobotSpeed, this, speed, radius);
    return retval;
}
int CLinkbotLGroup::stopAllJoints() {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGL_stopAllJoints_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, stopAllJoints, this);
    return retval;
}
int CLinkbotLGroup::stopOneJoint(int id) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGL_stopOneJoint_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, stopOneJoint, this, id);
    return retval;
}
